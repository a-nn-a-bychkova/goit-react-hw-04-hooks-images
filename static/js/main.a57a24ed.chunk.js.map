{"version":3,"sources":["components/ImageGalleryItem/ImageGalleryItem.module.css","components/Modal/Modal.module.css","components/Searchbar/Searchbar.module.css","components/ImageGallery/ImageGallery.module.css","components/Button/Button.module.css","components/Searchform/Searchform.module.css","components/Searchform/Searchform.js","components/Searchbar/Searchbar.js","services/images-api.js","components/ImageGalleryItem/ImageGalleryItem.js","components/Loader/Loader.js","components/Button/Button.js","components/ImageGallery/ImageGallery.js","components/Modal/Modal.js","components/App.js","reportWebVitals.js","index.js"],"names":["module","exports","Searchform","props","useState","searchQuery","setSearchQuery","onSubmit","event","preventDefault","trim","alert","className","s","SearchForm","type","button","label","input","autoComplete","autoFocus","placeholder","value","onChange","currentTarget","toLowerCase","Searchbar","children","api","fetchImage","page","fetch","then","response","json","ImageGalleryItem","smallPicture","largePicture","alt","item","src","image","data-url","Spinner","div","color","height","width","Component","Button","onClick","Status","ImageGallery","images","setImages","error","setError","status","setStatus","setPage","useEffect","fetchImages","currentSearchQuery","imageAPI","newImages","hits","length","window","scrollTo","top","document","documentElement","scrollHeight","behavior","catch","target","tagName","dataset","url","map","index","webformatURL","largeImageURL","tags","id","modalRoot","querySelector","Modal","addEventListener","handleKeyDown","removeEventListener","code","onClose","createPortal","Overlay","App","showModal","setShowModal","largeImage","setLargeImage","toggleModal","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a57a24ed.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ImageGalleryItem_item__1N3tB\",\"image\":\"ImageGalleryItem_image__3KRpq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Overlay\":\"Modal_Overlay__3Y2Ss\",\"Modal\":\"Modal_Modal__1CKUJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Searchbar\":\"Searchbar_Searchbar__1cRYZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ImageGallery\":\"ImageGallery_ImageGallery__3o8UC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__to_Ql\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SearchForm\":\"Searchform_SearchForm__22KqX\",\"button\":\"Searchform_button__AbRmc\",\"label\":\"Searchform_label__31aQ2\",\"input\":\"Searchform_input__3-vHI\"};","import { Component, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport s from './Searchform.module.css';\nimport PropTypes from 'prop-types';\n\nexport default function Searchform(props) {\n  const [searchQuery, setSearchQuery] = useState('');\n  const handleSearchQueryChange = event => {\n    setSearchQuery(event.currentTarget.value.toLowerCase());\n  };\n\n  const handleSubmit = event => {\n    const { onSubmit } = props;\n    event.preventDefault();\n    if (searchQuery.trim() === '') {\n      // toast.error('The request is empty');\n      return alert('The request is empty');\n    }\n    onSubmit(searchQuery);\n    setSearchQuery('');\n  };\n  return (\n    <form onSubmit={handleSubmit} className={s.SearchForm}>\n      <button type=\"submit\" className={s.button}>\n        <span className={s.label}>Search</span>\n      </button>\n\n      <input\n        className={s.input}\n        type=\"text\"\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Search images and photos\"\n        value={searchQuery}\n        onChange={handleSearchQueryChange}\n      />\n    </form>\n  );\n}\n\nSearchform.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\n// export default class Searchform extends Component {\n//   static propTypes = {\n//     onSubmit: PropTypes.func.isRequired,\n//   };\n//   state = {\n//     searchQuery: '',\n//   };\n\n//   handleSearchQueryChange = event => {\n//     this.setState({ searchQuery: event.currentTarget.value.toLowerCase() });\n//   };\n\n//   handleSubmit = event => {\n//     const { searchQuery } = this.state;\n//     const { onSubmit } = this.props;\n//     event.preventDefault();\n//     if (searchQuery.trim() === '') {\n//       // toast.error('The request is empty');\n\n//       return alert('The request is empty');\n//     }\n//     onSubmit(searchQuery);\n//     this.setState({ searchQuery: '' });\n//   };\n\n//   render() {\n//     const { searchQuery } = this.state;\n//     return (\n//       <form onSubmit={this.handleSubmit} className={s.SearchForm}>\n//         <button type=\"submit\" className={s.button}>\n//           <span className={s.label}>Search</span>\n//         </button>\n\n//         <input\n//           className={s.input}\n//           type=\"text\"\n//           autoComplete=\"off\"\n//           autoFocus\n//           placeholder=\"Search images and photos\"\n//           value={searchQuery}\n//           onChange={this.handleSearchQueryChange}\n//         />\n//       </form>\n//     );\n//   }\n// }\n","import React, { Component } from 'react';\nimport SearchForm from '../Searchform';\nimport s from './Searchbar.module.css';\nimport PropTypes from 'prop-types';\n\nconst Searchbar = ({ children }) => {\n  return <header className={s.Searchbar}>{children}</header>;\n};\n\nexport default Searchbar;\n\nSearchbar.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n","function fetchImage(searchQuery, page) {\n  return fetch(\n    `https://pixabay.com/api/?q=${searchQuery}&page=${page}&key=19110749-e340c63922b3f8a4d502270f7&image_type=photo&orientation=horizontal&per_page=12`,\n  ).then(response => response.json());\n}\n\nconst api = { fetchImage };\nexport default api;\n","import React, { Component } from 'react';\nimport api from '../../services/images-api';\nimport s from './ImageGalleryItem.module.css';\nimport PropTypes from 'prop-types';\n\nconst ImageGalleryItem = ({ smallPicture, largePicture, alt }) => {\n  return (\n    <li className={s.item}>\n      <img\n        src={smallPicture}\n        alt={alt}\n        className={s.image}\n        data-url={largePicture}\n      />\n    </li>\n  );\n};\n\nexport default ImageGalleryItem;\n\nImageGalleryItem.propTypes = {\n  smallPicture: PropTypes.string.isRequired,\n  largePicture: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n};\n","import React, { Component } from 'react';\nimport Loader from 'react-loader-spinner';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport s from './Spinner.module.css';\n\nexport default class Spinner extends Component {\n  render() {\n    return (\n      <div className={s.div}>\n        <Loader type=\"ThreeDots\" color=\"#00BFFF\" height={80} width={80} />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Button.module.css';\n\nconst Button = ({ onClick }) => (\n  <button type=\"button\" onClick={onClick}>\n    Load more\n  </button>\n);\n\nexport default Button;\n\nButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n","import React, { Component, useState, useEffect } from 'react';\nimport s from './ImageGallery.module.css';\nimport ImageGalleryItem from '../ImageGalleryItem';\nimport Loader from '../Loader';\nimport Button from '../Button';\nimport imageAPI from '../../services/images-api';\nimport PropTypes from 'prop-types';\n\nconst Status = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n};\n\nexport default function ImageGallery(props) {\n  const [images, setImages] = useState([]);\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState(Status.IDLE);\n  const [page, setPage] = useState(1);\n  const searchQuery = props.searchQuery;\n\n  useEffect(() => {\n    if (searchQuery === '') {\n      return;\n    }\n    setImages([]);\n    setError(null);\n    setStatus(Status.IDLE);\n    setPage(1);\n    fetchImages(searchQuery, 1);\n  }, [searchQuery]);\n\n  useEffect(() => {\n    if (page === 1) {\n      return;\n    }\n    fetchImages(searchQuery, page);\n  }, [page]);\n\n  const fetchImages = (currentSearchQuery, page) => {\n    setStatus(Status.PENDING);\n    imageAPI\n      .fetchImage(currentSearchQuery, page)\n      .then(newImages => {\n        if (newImages.hits.length === 0 && page === 1) {\n          return (\n            setError(`по запросу ${currentSearchQuery} ничего не найдено`),\n            setStatus(Status.REJECTED)\n          );\n        } else if (newImages.hits.length === 0 && page > 1) {\n          return setStatus(Status.RESOLVED);\n        }\n        return (\n          setImages(images => [...images, ...newImages.hits]),\n          setStatus(Status.RESOLVED),\n          window.scrollTo({\n            top: document.documentElement.scrollHeight,\n            behavior: 'smooth',\n          })\n        );\n      })\n      .catch(error => {\n        return setError(error), setStatus(Status.REJECTED);\n      });\n  };\n\n  const changePageNumber = page => {\n    setPage(page => page + 1);\n  };\n\n  const handleImgClick = event => {\n    if (event.target.tagName === 'IMG') {\n      props.onClick(event.target.dataset.url, event.target.alt);\n    }\n  };\n\n  if (status === 'idle') {\n    return <></>;\n  }\n  if (status === 'pending' || status === 'resolved') {\n    return (\n      <div>\n        <ul className={s.ImageGallery} onClick={handleImgClick}>\n          {images.map((image, index) => (\n            <ImageGalleryItem\n              key={`${image.id}${index}`}\n              smallPicture={image.webformatURL}\n              largePicture={image.largeImageURL}\n              alt={image.tags}\n            />\n          ))}\n        </ul>\n        {status === 'resolved' && <Button onClick={changePageNumber} />}\n        {status === 'pending' && <Loader />}\n      </div>\n    );\n  }\n\n  if (status === 'rejected') {\n    return <h1>{error}</h1>;\n  }\n}\n\nImageGallery.propTypes = {\n  searchQuery: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\n// export default class ImageGallery extends Component {\n//   static propTypes = {\n//     searchQuery: PropTypes.string.isRequired,\n//     onClick: PropTypes.func.isRequired,\n//   };\n\n//   state = {\n//     images: [],\n//     error: null,\n//     status: Status.IDLE,\n//     page: 1,\n//   };\n\n// componentDidUpdate(prevProps, prevState) {\n//   const currentSearchQuery = this.props.searchQuery;\n//   const currentPage = this.state.page;\n//   if (prevProps.searchQuery !== currentSearchQuery) {\n//     this.setState({ images: [], error: null, status: Status.IDLE, page: 1 });\n//   }\n\n//   if (\n//     prevProps.searchQuery !== currentSearchQuery ||\n//     prevState.page !== currentPage\n//   ) {\n//     if (prevProps.searchQuery !== currentSearchQuery) {\n//       this.setState({\n//         images: [],\n//         error: null,\n//         status: Status.IDLE,\n//         page: 1,\n//       });\n//       this.fetchImages(currentSearchQuery, 1);\n//     }\n//     if (prevState.page !== currentPage) {\n//       if (currentPage === 1) {\n//         return;\n//       }\n//       this.fetchImages(currentSearchQuery, currentPage);\n//     }\n//   }\n// }\n\n// fetchImages = (currentSearchQuery, page) => {\n//   this.setState({ status: Status.PENDING });\n//   imageAPI\n//     .fetchImage(currentSearchQuery, page)\n//     .then(newImages => {\n//       if (newImages.hits.length > 0) {\n//         return (\n//           this.setState(prevState => ({\n//             images: [...prevState.images, ...newImages.hits],\n//             status: Status.RESOLVED,\n//           })),\n//           window.scrollTo({\n//             top: document.documentElement.scrollHeight,\n//             behavior: 'smooth',\n//           })\n//         );\n//       }\n//       return this.setState({\n//         error: `по запросу ${currentSearchQuery} ничего не найдено`,\n//         status: Status.REJECTED,\n//       });\n//     })\n//     .catch(error => this.setState({ error, status: Status.REJECTED }));\n// };\n\n//   changePageNumber = page => {\n//     this.setState({ page: this.state.page + 1 });\n//   };\n\n//   handleImgClick = event => {\n//     if (event.target.tagName === 'IMG') {\n//       this.props.onClick(event.target.dataset.url, event.target.alt);\n//     }\n//   };\n\n//   render() {\n//     const { error, images, status } = this.state;\n\n//     if (status === 'idle') {\n//       return <></>;\n//     }\n//     if (status === 'pending' || status === 'resolved') {\n//       return (\n//         <div>\n//           <ul className={s.ImageGallery} onClick={this.handleImgClick}>\n//             {images.map((image, index) => (\n//               <ImageGalleryItem\n//                 key={`${image.id}${index}`}\n//                 smallPicture={image.webformatURL}\n//                 largePicture={image.largeImageURL}\n//                 alt={image.tags}\n//               />\n//             ))}\n//           </ul>\n//           {status === 'resolved' && <Button onClick={this.changePageNumber} />}\n//           {status === 'pending' && <Loader />}\n//         </div>\n//       );\n//     }\n\n//     if (status === 'rejected') {\n//       return <h1>{error}</h1>;\n//     }\n//   }\n// }\n","import React, { Component, useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport s from './Modal.module.css';\nimport { doc } from 'prettier';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport default function Modal(props) {\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []);\n\n  const handleKeyDown = event => {\n    if (event.code === 'Escape') {\n      props.onClose();\n    }\n  };\n\n  const handleBackdropClick = event => {\n    if (event.currentTarget === event.target) {\n      props.onClose();\n    }\n  };\n\n  const { src, alt } = props;\n\n  return createPortal(\n    <div className={s.Overlay} onClick={handleBackdropClick}>\n      <div className={s.Modal}>\n        <img src={src} alt={alt} />\n      </div>\n    </div>,\n    modalRoot,\n  );\n}\n\nModal.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\n// export default class Modal extends Component {\n//   static propTypes = {\n//     src: PropTypes.string.isRequired,\n//     alt: PropTypes.string.isRequired,\n//     onClose: PropTypes.func.isRequired,\n//   };\n\n//   componentDidMount() {\n//     window.addEventListener('keydown', this.handleKeyDown);\n//   }\n\n//   componentWillUnmount() {\n//     window.removeEventListener('keydown', this.handleKeyDown);\n//   }\n\n//   handleKeyDown = event => {\n//     if (event.code === 'Escape') {\n//       this.props.onClose();\n//     }\n//   };\n\n//   handleBackdropClick = event => {\n//     if (event.currentTarget === event.target) {\n//       this.props.onClose();\n//     }\n//   };\n\n//   render() {\n//     const { src, alt } = this.props;\n//     return createPortal(\n//       <div className={s.Overlay} onClick={this.handleBackdropClick}>\n//         <div className={s.Modal}>\n//           <img src={src} alt={alt} />\n//         </div>\n//       </div>,\n//       modalRoot,\n//     );\n//   }\n// }\n","import React, { Component, useState } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Searchbar from './Searchbar';\nimport Searchform from './Searchform';\nimport ImageGallery from './ImageGallery';\nimport Modal from './Modal';\n\nfunction App() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [showModal, setShowModal] = useState(false);\n  const [largeImage, setLargeImage] = useState({ src: '', alt: '' });\n\n  const handleFormSubmit = searchQuery => {\n    setSearchQuery(searchQuery);\n  };\n\n  const handleImageClick = (src, alt) => {\n    setLargeImage({ src, alt });\n    toggleModal();\n  };\n\n  const toggleModal = () => {\n    setShowModal(showModal => !showModal);\n  };\n  return (\n    <div>\n      <Searchbar>\n        <Searchform onSubmit={handleFormSubmit} />\n      </Searchbar>\n      <ImageGallery searchQuery={searchQuery} onClick={handleImageClick} />\n      {showModal && (\n        <Modal\n          src={largeImage.src}\n          alt={largeImage.alt}\n          onClose={toggleModal}\n        />\n      )}\n      <ToastContainer />\n    </div>\n  );\n}\n\nexport default App;\n\n// class App extends Component {\n//   state = {\n//     searchQuery: '',\n//     showModal: false,\n//     largeImage: { src: '', alt: '' },\n//   };\n\n//   handleFormSubmit = searchQuery => {\n//     this.setState({ searchQuery });\n//   };\n\n//   handleImageClick = (src, alt) => {\n//     this.setState({ largeImage: { src, alt } });\n//     this.toggleModal();\n//   };\n\n//   toggleModal = () => {\n//     this.setState(({ showModal }) => ({ showModal: !showModal }));\n//   };\n\n//   render() {\n//     const { searchQuery, largeImage, showModal } = this.state;\n//     return (\n//       <div>\n//         <Searchbar>\n//           <Searchform onSubmit={this.handleFormSubmit} />\n//         </Searchbar>\n//         <ImageGallery\n//           searchQuery={searchQuery}\n//           onClick={this.handleImageClick}\n//         />\n//         {showModal && (\n//           <Modal\n//             src={largeImage.src}\n//             alt={largeImage.alt}\n//             onClose={this.toggleModal}\n//           />\n//         )}\n//         <ToastContainer />\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}